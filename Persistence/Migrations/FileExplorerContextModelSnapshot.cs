// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(FileExplorerContext))]
    partial class FileExplorerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("Core.Domain.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MediaFolderId")
                        .HasColumnType("TEXT");

                    b.Property<long>("MediaTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MediaFolderId");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("Medias", (string)null);
                });

            modelBuilder.Entity("Core.Domain.MediaFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("MediaFolders", (string)null);
                });

            modelBuilder.Entity("Core.Domain.MediaType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MediaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Image"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Video"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "File"
                        });
                });

            modelBuilder.Entity("Core.Domain.Media", b =>
                {
                    b.HasOne("Core.Domain.MediaFolder", "MediaFolder")
                        .WithMany("Medias")
                        .HasForeignKey("MediaFolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Domain.MediaType", "MediaType")
                        .WithMany("Medias")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaFolder");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("Core.Domain.MediaFolder", b =>
                {
                    b.HasOne("Core.Domain.MediaFolder", "ParentFolder")
                        .WithMany("Folders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Core.Domain.MediaFolder", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Medias");
                });

            modelBuilder.Entity("Core.Domain.MediaType", b =>
                {
                    b.Navigation("Medias");
                });
#pragma warning restore 612, 618
        }
    }
}
